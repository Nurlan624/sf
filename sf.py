# sf.py
# –í–µ–±—Ö—É–∫-–±–æ—Ç: –º–µ–Ω—é, –∫–æ—Ä–∑–∏–Ω–∞, —É–¥–∞–ª–µ–Ω–∏–µ, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –¥–æ—Å—Ç–∞–≤–∫–∞ 99 ‚ÇΩ, —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –∞–¥–º–∏–Ω–∞.
# FIX v3:
# - –£—Å—Ç–æ–π—á–∏–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ items_json –±–µ–∑ –ª–∏—à–Ω–∏—Ö warning –¥–ª—è "–∫–æ–º–Ω–∞—Ç–Ω—ã—Ö" —Å—Ç—Ä–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "455U/456–í")
# - –ö–æ–º–∞–Ω–¥–∞ /fixdb –¥–ª—è –∞–¥–º–∏–Ω–∞: –º–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö –∫—Ä–∏–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –ë–î (–æ—á–∏—Å—Ç–∫–∞ items_json, –ø–µ—Ä–µ–Ω–æ—Å –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
# - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö
# –°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å python-telegram-bot[webhooks] 21.x (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º 21.6)

import os, json, sqlite3, re, logging
from datetime import datetime
from typing import Dict, Any, Tuple

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# ---------------- .env ----------------
try:
    from dotenv import load_dotenv
    load_dotenv()
except Exception:
    pass

BOT_TOKEN = os.getenv("BOT_TOKEN", "")
ADMIN_IDS = {int(x) for x in os.getenv("ADMIN_IDS", "").replace(" ", "").split(",") if x}
DB_PATH = os.getenv("DB_PATH", "orders.db")

def _auto_base_url() -> str:
    base = os.getenv("BASE_URL") or os.getenv("RENDER_EXTERNAL_URL")
    if base:
        return base.rstrip("/")
    host = os.getenv("RENDER_EXTERNAL_HOSTNAME")
    if host:
        return f"https://{host}".rstrip("/")
    return ""

BASE_URL = _auto_base_url()
WEBHOOK_SECRET_PATH = os.getenv("WEBHOOK_SECRET_PATH", "tgwebhook")
PORT = int(os.environ.get("PORT", "10000"))

DELIVERY_FEE = 99
ROOM_RE = re.compile(r'^\d+[A-Za-z–ê-–Ø–∞-—è]$')

MENU: Dict[str, tuple] = {
    "energy": ("–≠–ù–ï–†–ì–ï–¢–ò–ö", 65),
    "cola": ("–ö–û–õ–ê (–æ—Ä–∏–≥)", 110),
    "chips": ("–ß–ò–ü–°–´", 70),
    "pepsi": ("–ü–ï–ü–°–ò (–æ—Ä–∏–≥)", 105),
    "water": ("–í–û–î–ê", 44),
    "chocopie": ("–ß–û–ö–û–ü–ê–ô", 25),
    "7up": ("–°–ï–í–≠–ù–ê–ü (–æ—Ä–∏–≥)", 105),
}

logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
log = logging.getLogger("snackbot")

STATE: Dict[int, Dict[str, Any]] = {}

# ---------------- DB ----------------
def db_init():
    os.makedirs(os.path.dirname(DB_PATH) or ".", exist_ok=True)
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            room TEXT,
            items_json TEXT,
            note TEXT,
            total INTEGER,
            status TEXT,
            created_at TEXT,
            updated_at TEXT
        )
    """)
    conn.commit()
    conn.close()

def db_insert_order(user_id:int, username:str, room:str, items:Dict[str,int], note:str, total:int)->int:
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    now = datetime.now().isoformat(timespec="seconds")
    cur.execute("""
        INSERT INTO orders (user_id, username, room, items_json, note, total, status, created_at, updated_at)
        VALUES (?, ?, ?, ?, ?, ?, 'NEW', ?, ?)
    """, (user_id, username or "", room, json.dumps(items, ensure_ascii=False), note or "", total, now, now))
    conn.commit()
    oid = cur.lastrowid
    conn.close()
    return oid

def db_update_status(order_id:int, status:str):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    now = datetime.now().isoformat(timespec="seconds")
    cur.execute("UPDATE orders SET status=?, updated_at=? WHERE id=?", (status, now, order_id))
    conn.commit()
    conn.close()

def _parse_items_json(value: str) -> Dict[str, int]:
    """–ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç str(dict).
    –ï—Å–ª–∏ –≤–Ω—É—Ç—Ä–∏ —Å–ª—É—á–∞–π–Ω–æ –ª–µ–∂–∏—Ç '–∫–æ–º–Ω–∞—Ç–∞' (–Ω–∞–ø—Ä–∏–º–µ—Ä '455U'/'456–í'), —Ç–∏—Ö–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π dict –±–µ–∑ warning.
    """
    if not value:
        return {}
    # –µ—Å–ª–∏ —ç—Ç–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ ‚Äî –Ω–µ —Ñ–ª—É–¥–∏–º –≤ –ª–æ–≥–∏
    if ROOM_RE.fullmatch(value.strip()):
        return {}
    try:
        obj = json.loads(value)
        if isinstance(obj, dict):
            return {str(k): int(v) for k, v in obj.items()}
        return {}
    except Exception as e_json:
        try:
            import ast
            obj = ast.literal_eval(value)
            if isinstance(obj, dict):
                return {str(k): int(v) for k, v in obj.items()}
        except Exception as e_ast:
            log.warning("items_json parse failed; raw=%r; json_err=%r; ast_err=%r", value, e_json, e_ast)
            return {}

def db_get_order(order_id:int):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT * FROM orders WHERE id=?", (order_id,))
    row = cur.fetchone()
    conn.close()
    if not row:
        return None
    keys = ["id","user_id","username","room","items_json","note","total","status","created_at","updated_at"]
    rec = dict(zip(keys,row))
    rec["items"] = _parse_items_json((rec.get("items_json") or "").strip())
    return rec

def db_sanitize():
    """–û–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: –æ—á–∏—â–∞–µ–º items_json, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–∞—Ä—Å–∏—Ç—Å—è;
    –µ—Å–ª–∏ room –ø—É—Å—Ç–∞—è, –∞ items_json –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ '–∫–æ–º–Ω–∞—Ç–∞' ‚Äî –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤ room.
    """
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT id, items_json, room FROM orders")
    rows = cur.fetchall()
    fixed = moved = 0
    for oid, items_json, room in rows:
        raw = (items_json or "").strip()
        items = _parse_items_json(raw)
        if items:
            continue  # –≤–∞–ª–∏–¥–Ω–æ
        # –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—é
        if raw and ROOM_RE.fullmatch(raw):
            if not room or room.strip() == "‚Äî":
                cur.execute("UPDATE orders SET room=?, items_json='{}' WHERE id=?", (raw.upper(), oid))
                moved += 1
            else:
                cur.execute("UPDATE orders SET items_json='{}' WHERE id=?", (oid,))
                fixed += 1
        else:
            # –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º –±–∏—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if raw not in ("", "{}", "null", "None"):
                cur.execute("UPDATE orders SET items_json='{}' WHERE id=?", (oid,))
                fixed += 1
    conn.commit()
    conn.close()
    return fixed, moved

# ---------------- Helpers/UI ----------------
def fmt_items(cart:Dict[str,int])->str:
    if not cart: return "‚Äî"
    return "\n".join(f"‚Ä¢ {MENU[k][0]} √ó{q} = {MENU[k][1]*q}‚ÇΩ" for k,q in cart.items() if k in MENU)

def get_cart_subtotal(cart:Dict[str,int])->int:
    return sum(MENU[i][1]*q for i,q in cart.items() if i in MENU)

def menu_keyboard()->InlineKeyboardMarkup:
    rows = [[InlineKeyboardButton(f"{v[0]} ‚Äî {v[1]}‚ÇΩ", callback_data=f"add:{k}")] for k,v in MENU.items()]
    rows.append([InlineKeyboardButton("üè´ –°–º–µ–Ω–∏—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é", callback_data="change_room")])
    rows.append([InlineKeyboardButton("üß∫ –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart"),
                 InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å", callback_data="checkout")])
    return InlineKeyboardMarkup(rows)

def admin_order_kb(order_id:int)->InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"adm:{order_id}:ACCEPTED"),
         InlineKeyboardButton("üõµ –í –ø—É—Ç–∏", callback_data=f"adm:{order_id}:ON_THE_WAY")],
        [InlineKeyboardButton("üì¶ –î–æ—Å—Ç–∞–≤–ª–µ–Ω", callback_data=f"adm:{order_id}:DELIVERED"),
         InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data=f"adm:{order_id}:CANCELED")]
    ])

def cart_keyboard(cart:Dict[str,int])->InlineKeyboardMarkup:
    kb = []
    for k,q in cart.items():
        if k in MENU:
            kb.append([InlineKeyboardButton(f"‚ûñ –£–±—Ä–∞—Ç—å {MENU[k][0]}", callback_data=f"del:{k}")])
    kb.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="back2menu"),
               InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å", callback_data="checkout")])
    return InlineKeyboardMarkup(kb)

# ---------------- Bot Logic ----------------
async def ensure_state(update: Update)->Dict[str,Any]:
    chat_id = update.effective_chat.id
    if chat_id not in STATE:
        STATE[chat_id] = {"room": None, "cart": {}, "note": None, "awaiting": "room"}
    return STATE[chat_id]

async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    st = await ensure_state(update)
    st["awaiting"] = "room"
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! üç´ –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (—Ü–∏—Ñ—Ä—ã + –±—É–∫–≤–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä 429–ì):")

async def fixdb_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    fixed, moved = db_sanitize()
    await update.message.reply_text(f"‚úÖ –ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞.\n–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {fixed}\n–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ room: {moved}")

async def cb_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat.id
    user = update.effective_user
    st = STATE.setdefault(chat_id, {"room": None, "cart": {}, "note": None, "awaiting": None})
    data = query.data

    if data == "change_room":
        st["awaiting"] = "room"
        await query.edit_message_text("–í–≤–µ–¥–∏ –Ω–æ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 429–≥):")
        return

    if data.startswith("add:"):
        item = data.split(":", 1)[1]
        st["cart"][item] = st["cart"].get(item, 0) + 1
        subtotal = get_cart_subtotal(st["cart"])
        await query.edit_message_text(
            f"–î–æ–±–∞–≤–∏–ª: {MENU[item][0]} ‚Äî {MENU[item][1]}‚ÇΩ\n"
            f"–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤: {subtotal}‚ÇΩ",
            reply_markup=menu_keyboard()
        )
        return

    if data == "cart":
        if not st["cart"]:
            await query.edit_message_text("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=menu_keyboard())
            return
        subtotal = get_cart_subtotal(st["cart"])
        grand = subtotal + DELIVERY_FEE
        lines = [
            "üß∫ –¢–≤–æ—è –∫–æ—Ä–∑–∏–Ω–∞:",
            fmt_items(st["cart"]),
            f"\nüí∞ –¢–æ–≤–∞—Ä—ã: {subtotal}‚ÇΩ",
            f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {DELIVERY_FEE}‚ÇΩ",
            f"–ò—Ç–æ–≥–æ: {grand}‚ÇΩ",
        ]
        await query.edit_message_text("\n".join(lines), reply_markup=cart_keyboard(st["cart"]))
        return

    if data.startswith("del:"):
        item = data.split(":", 1)[1]
        if st["cart"].get(item, 0) > 1:
            st["cart"][item] -= 1
        else:
            st["cart"].pop(item, None)

        if not st["cart"]:
            await query.edit_message_text("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=menu_keyboard())
            return

        subtotal = get_cart_subtotal(st["cart"])
        grand = subtotal + DELIVERY_FEE
        lines = [
            "üß∫ –¢–≤–æ—è –∫–æ—Ä–∑–∏–Ω–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ):",
            fmt_items(st["cart"]),
            f"\nüí∞ –¢–æ–≤–∞—Ä—ã: {subtotal}‚ÇΩ",
            f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {DELIVERY_FEE}‚ÇΩ",
            f"–ò—Ç–æ–≥–æ: {grand}‚ÇΩ",
        ]
        await query.edit_message_text("\n".join(lines), reply_markup=cart_keyboard(st["cart"]))
        return

    if data == "back2menu":
        await query.edit_message_text("–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤—ã–±–∏—Ä–∞—Ç—å:", reply_markup=menu_keyboard())
        return

    if data == "checkout":
        if not st["cart"]:
            await query.edit_message_text("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=menu_keyboard())
            return
        if not st["room"]:
            st["awaiting"] = "room"
            await query.edit_message_text("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 429–ì):")
            return
        subtotal = get_cart_subtotal(st["cart"])
        grand = subtotal + DELIVERY_FEE
        lines = [
            f"üìç –ê—É–¥–∏—Ç–æ—Ä–∏—è {st['room']}",
            fmt_items(st["cart"]),
            f"\nüí∞ –¢–æ–≤–∞—Ä—ã: {subtotal}‚ÇΩ",
            f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {DELIVERY_FEE}‚ÇΩ",
            f"–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {grand}‚ÇΩ"
        ]
        kb = [[InlineKeyboardButton("‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="add_comment")],
              [InlineKeyboardButton("üí≥ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è", callback_data="confirm")]]
        await query.edit_message_text("–ü—Ä–æ–≤–µ—Ä—å –∑–∞–∫–∞–∑:\n" + "\n".join(lines), reply_markup=InlineKeyboardMarkup(kb))
        return

    if data == "add_comment":
        st["awaiting"] = "comment"
        await query.edit_message_text("–ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
        return

    if data == "confirm":
        subtotal = get_cart_subtotal(st["cart"])
        grand = subtotal + DELIVERY_FEE
        note = st.get("note") or "‚Äî"
        order_id = db_insert_order(user.id, user.username or "", st["room"], st["cart"], note, grand)

        admin_text = (
            f"üÜï –ó–∞–∫–∞–∑ #{order_id}\n"
            f"–û—Ç @{user.username or '‚Äî'} (id {user.id})\n"
            f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {st['room']}\n"
            f"{fmt_items(st['cart'])}\n\n"
            f"üí∞ –¢–æ–≤–∞—Ä—ã: {subtotal}‚ÇΩ\n"
            f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {DELIVERY_FEE}‚ÇΩ\n"
            f"–ò—Ç–æ–≥–æ: {grand}‚ÇΩ\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {note}"
        )
        for aid in ADMIN_IDS:
            try:
                await context.bot.send_message(aid, admin_text, reply_markup=admin_order_kb(order_id))
            except Exception as e:
                log.warning(f"Admin notify fail: {e}")

        await query.edit_message_reply_markup(reply_markup=None)
        await context.bot.send_message(
            chat_id=chat_id,
            text=(
                f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç!\n\n"
                f"üí∞ –¢–æ–≤–∞—Ä—ã: {subtotal}‚ÇΩ\n"
                f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {DELIVERY_FEE}‚ÇΩ\n"
                f"–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {grand}‚ÇΩ\n"
                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {note}"
            ),
        )
        st["cart"].clear()
        st["note"] = None
        return

    if data.startswith("adm:"):
        try:
            _, oid_str, status = data.split(":")
            order_id = int(oid_str)
        except Exception:
            await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID", show_alert=True)
            return

        rec = db_get_order(order_id)
        if not rec:
            await query.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        db_update_status(order_id, status)

        text_map = {
            "ACCEPTED": "‚úÖ –ø—Ä–∏–Ω—è—Ç",
            "ON_THE_WAY": "üõµ –≤ –ø—É—Ç–∏",
            "DELIVERED": "üì¶ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω",
            "CANCELED": "üö´ –æ—Ç–º–µ–Ω—ë–Ω"
        }
        msg = f"–°—Ç–∞—Ç—É—Å —Ç–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞ #{order_id}: {text_map.get(status, status)}"
        try:
            await context.bot.send_message(rec["user_id"], msg)
        except Exception:
            pass
        await context.bot.send_message(chat_id, text=f"–ó–∞–∫–∞–∑ #{order_id} –æ–±–Ω–æ–≤–ª—ë–Ω ‚Üí {text_map.get(status, status)}")
        return

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    st = await ensure_state(update)
    text = (update.message.text or "").strip()

    if st.get("awaiting") == "room":
        if not ROOM_RE.fullmatch(text):
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏: —Ü–∏—Ñ—Ä—ã + –±—É–∫–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 429–ì).")
            return
        st["room"] = text.upper()
        st["awaiting"] = None
        await update.message.reply_text(f"‚úÖ –ê—É–¥–∏—Ç–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {st['room']}", reply_markup=menu_keyboard())
        return

    if st.get("awaiting") == "comment":
        if text == "/skip":
            st["note"] = None
        else:
            st["note"] = text
        st["awaiting"] = None
        subtotal = get_cart_subtotal(st["cart"])
        grand = subtotal + DELIVERY_FEE
        await update.message.reply_text(
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ\n"
            "–ü—Ä–æ–≤–µ—Ä—å —Å—É–º–º—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –∑–∞–∫–∞–∑:\n"
            f"üí∞ –¢–æ–≤–∞—Ä—ã: {subtotal}‚ÇΩ\n"
            f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {DELIVERY_FEE}‚ÇΩ\n"
            f"–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {grand}‚ÇΩ",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üí≥ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm")]])
        )
        return

    await update.message.reply_text("–î–æ–±–∞–≤–ª—è–π –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –º–µ–Ω—é:", reply_markup=menu_keyboard())

# ---------------- Error handler ----------------
async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    log.exception("Unhandled error in handler", exc_info=context.error)

# ---------------- Main (blocking run_webhook) ----------------
def main():
    if not BOT_TOKEN:
        raise RuntimeError("–ù–µ —É–∫–∞–∑–∞–Ω BOT_TOKEN")
    db_init()

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("fixdb", fixdb_cmd))
    app.add_handler(CallbackQueryHandler(cb_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    app.add_error_handler(on_error)

    base = BASE_URL
    if not base:
        raise RuntimeError("BASE_URL –Ω–µ –∑–∞–¥–∞–Ω –∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –£–∫–∞–∂–∏ BASE_URL –≤ Environment –∏–ª–∏ –ø–æ–ª–æ–∂–∏—Å—å –Ω–∞ RENDER_EXTERNAL_URL.")
    webhook_url = f"{base.rstrip('/')}/{WEBHOOK_SECRET_PATH}"

    log.info(f"Starting webhook on 0.0.0.0:{PORT} ‚Üí {webhook_url}")
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=WEBHOOK_SECRET_PATH,
        webhook_url=webhook_url,
    )

if __name__ == "__main__":
    main()
